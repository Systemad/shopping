/**
 * Generated by @openapi-codegen
 *
 * @version v1
 */
import * as reactQuery from "@tanstack/react-query";
import { useShopContext, ShopContext } from "./shopContext";
import type * as Fetcher from "./shopFetcher";
import { shopFetch } from "./shopFetcher";
import type * as Schemas from "./shopSchemas";

export type ShoppingCartGetShoppingCartError = Fetcher.ErrorWrapper<undefined>;

export type ShoppingCartGetShoppingCartResponse = Schemas.CartItem[];

export type ShoppingCartGetShoppingCartVariables =
  ShopContext["fetcherOptions"];

export const fetchShoppingCartGetShoppingCart = (
  variables: ShoppingCartGetShoppingCartVariables,
  signal?: AbortSignal
) =>
  shopFetch<
    ShoppingCartGetShoppingCartResponse,
    ShoppingCartGetShoppingCartError,
    undefined,
    {},
    {},
    {}
  >({ url: "/shopping-cart", method: "get", ...variables, signal });

export const useShoppingCartGetShoppingCart = <
  TData = ShoppingCartGetShoppingCartResponse
>(
  variables: ShoppingCartGetShoppingCartVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ShoppingCartGetShoppingCartResponse,
      ShoppingCartGetShoppingCartError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<
    ShoppingCartGetShoppingCartResponse,
    ShoppingCartGetShoppingCartError,
    TData
  >(
    queryKeyFn({
      path: "/shopping-cart",
      operationId: "shoppingCartGetShoppingCart",
      variables,
    }),
    ({ signal }) =>
      fetchShoppingCartGetShoppingCart(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ShoppingCartAddItemToCartPathParams = {
  id: string;
  /**
   * @format int32
   */
  quantity: number;
};

export type ShoppingCartAddItemToCartError = Fetcher.ErrorWrapper<undefined>;

export type ShoppingCartAddItemToCartResponse = Schemas.CartItem[];

export type ShoppingCartAddItemToCartVariables = {
  pathParams: ShoppingCartAddItemToCartPathParams;
} & ShopContext["fetcherOptions"];

export const fetchShoppingCartAddItemToCart = (
  variables: ShoppingCartAddItemToCartVariables,
  signal?: AbortSignal
) =>
  shopFetch<
    ShoppingCartAddItemToCartResponse,
    ShoppingCartAddItemToCartError,
    undefined,
    {},
    {},
    ShoppingCartAddItemToCartPathParams
  >({
    url: "/shopping-cart/add/{id}/{quantity}",
    method: "get",
    ...variables,
    signal,
  });

export const useShoppingCartAddItemToCart = <
  TData = ShoppingCartAddItemToCartResponse
>(
  variables: ShoppingCartAddItemToCartVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ShoppingCartAddItemToCartResponse,
      ShoppingCartAddItemToCartError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<
    ShoppingCartAddItemToCartResponse,
    ShoppingCartAddItemToCartError,
    TData
  >(
    queryKeyFn({
      path: "/shopping-cart/add/{id}/{quantity}",
      operationId: "shoppingCartAddItemToCart",
      variables,
    }),
    ({ signal }) =>
      fetchShoppingCartAddItemToCart(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ShoppingCartRemoveItemFromCartPathParams = {
  id: string;
  /**
   * @format int32
   */
  quantity: number;
};

export type ShoppingCartRemoveItemFromCartError =
  Fetcher.ErrorWrapper<undefined>;

export type ShoppingCartRemoveItemFromCartResponse = Schemas.CartItem[];

export type ShoppingCartRemoveItemFromCartVariables = {
  pathParams: ShoppingCartRemoveItemFromCartPathParams;
} & ShopContext["fetcherOptions"];

export const fetchShoppingCartRemoveItemFromCart = (
  variables: ShoppingCartRemoveItemFromCartVariables,
  signal?: AbortSignal
) =>
  shopFetch<
    ShoppingCartRemoveItemFromCartResponse,
    ShoppingCartRemoveItemFromCartError,
    undefined,
    {},
    {},
    ShoppingCartRemoveItemFromCartPathParams
  >({
    url: "/shopping-cart/remove/{id}/{quantity}",
    method: "get",
    ...variables,
    signal,
  });

export const useShoppingCartRemoveItemFromCart = <
  TData = ShoppingCartRemoveItemFromCartResponse
>(
  variables: ShoppingCartRemoveItemFromCartVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ShoppingCartRemoveItemFromCartResponse,
      ShoppingCartRemoveItemFromCartError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<
    ShoppingCartRemoveItemFromCartResponse,
    ShoppingCartRemoveItemFromCartError,
    TData
  >(
    queryKeyFn({
      path: "/shopping-cart/remove/{id}/{quantity}",
      operationId: "shoppingCartRemoveItemFromCart",
      variables,
    }),
    ({ signal }) =>
      fetchShoppingCartRemoveItemFromCart(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ShoppingCartEmptyCartError = Fetcher.ErrorWrapper<undefined>;

export type ShoppingCartEmptyCartVariables = ShopContext["fetcherOptions"];

export const fetchShoppingCartEmptyCart = (
  variables: ShoppingCartEmptyCartVariables,
  signal?: AbortSignal
) =>
  shopFetch<undefined, ShoppingCartEmptyCartError, undefined, {}, {}, {}>({
    url: "/shopping-cart/empty",
    method: "get",
    ...variables,
    signal,
  });

export const useShoppingCartEmptyCart = <TData = undefined>(
  variables: ShoppingCartEmptyCartVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ShoppingCartEmptyCartError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<undefined, ShoppingCartEmptyCartError, TData>(
    queryKeyFn({
      path: "/shopping-cart/empty",
      operationId: "shoppingCartEmptyCart",
      variables,
    }),
    ({ signal }) =>
      fetchShoppingCartEmptyCart({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProductGetProductQueryParams = {
  /**
   * The ID of the product
   */
  productId?: string;
};

export type ProductGetProductError = Fetcher.ErrorWrapper<undefined>;

export type ProductGetProductVariables = {
  queryParams?: ProductGetProductQueryParams;
} & ShopContext["fetcherOptions"];

export const fetchProductGetProduct = (
  variables: ProductGetProductVariables,
  signal?: AbortSignal
) =>
  shopFetch<
    Schemas.ProductDetail,
    ProductGetProductError,
    undefined,
    {},
    ProductGetProductQueryParams,
    {}
  >({ url: "/product/productId", method: "get", ...variables, signal });

export const useProductGetProduct = <TData = Schemas.ProductDetail>(
  variables: ProductGetProductVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProductDetail,
      ProductGetProductError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<
    Schemas.ProductDetail,
    ProductGetProductError,
    TData
  >(
    queryKeyFn({
      path: "/product/productId",
      operationId: "productGetProduct",
      variables,
    }),
    ({ signal }) =>
      fetchProductGetProduct({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProductGetProductsByIdQueryParams = {
  productIds?: string[];
};

export type ProductGetProductsByIdError = Fetcher.ErrorWrapper<undefined>;

export type ProductGetProductsByIdResponse = Schemas.ProductDetail[];

export type ProductGetProductsByIdVariables = {
  queryParams?: ProductGetProductsByIdQueryParams;
} & ShopContext["fetcherOptions"];

export const fetchProductGetProductsById = (
  variables: ProductGetProductsByIdVariables,
  signal?: AbortSignal
) =>
  shopFetch<
    ProductGetProductsByIdResponse,
    ProductGetProductsByIdError,
    undefined,
    {},
    ProductGetProductsByIdQueryParams,
    {}
  >({ url: "/product/productIds", method: "get", ...variables, signal });

export const useProductGetProductsById = <
  TData = ProductGetProductsByIdResponse
>(
  variables: ProductGetProductsByIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProductGetProductsByIdResponse,
      ProductGetProductsByIdError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<
    ProductGetProductsByIdResponse,
    ProductGetProductsByIdError,
    TData
  >(
    queryKeyFn({
      path: "/product/productIds",
      operationId: "productGetProductsById",
      variables,
    }),
    ({ signal }) =>
      fetchProductGetProductsById({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CategoryGetCategoriesError = Fetcher.ErrorWrapper<undefined>;

export type CategoryGetCategoriesResponse = Schemas.ProductCategory[];

export type CategoryGetCategoriesVariables = ShopContext["fetcherOptions"];

export const fetchCategoryGetCategories = (
  variables: CategoryGetCategoriesVariables,
  signal?: AbortSignal
) =>
  shopFetch<
    CategoryGetCategoriesResponse,
    CategoryGetCategoriesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/category/all", method: "get", ...variables, signal });

export const useCategoryGetCategories = <TData = CategoryGetCategoriesResponse>(
  variables: CategoryGetCategoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CategoryGetCategoriesResponse,
      CategoryGetCategoriesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<
    CategoryGetCategoriesResponse,
    CategoryGetCategoriesError,
    TData
  >(
    queryKeyFn({
      path: "/category/all",
      operationId: "categoryGetCategories",
      variables,
    }),
    ({ signal }) =>
      fetchCategoryGetCategories({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CategoryGetItemsForCategoryPathParams = {
  /**
   * Enter a category to fetch items of
   */
  category: string;
};

export type CategoryGetItemsForCategoryQueryParams = {
  /**
   * Enter amount, leave empty if default amount should be retrieved
   *
   * @format int32
   * @default 10
   */
  limit?: number;
};

export type CategoryGetItemsForCategoryError = Fetcher.ErrorWrapper<undefined>;

export type CategoryGetItemsForCategoryResponse = Schemas.ProductDetail[];

export type CategoryGetItemsForCategoryVariables = {
  pathParams: CategoryGetItemsForCategoryPathParams;
  queryParams?: CategoryGetItemsForCategoryQueryParams;
} & ShopContext["fetcherOptions"];

export const fetchCategoryGetItemsForCategory = (
  variables: CategoryGetItemsForCategoryVariables,
  signal?: AbortSignal
) =>
  shopFetch<
    CategoryGetItemsForCategoryResponse,
    CategoryGetItemsForCategoryError,
    undefined,
    {},
    CategoryGetItemsForCategoryQueryParams,
    CategoryGetItemsForCategoryPathParams
  >({ url: "/category/{category}", method: "get", ...variables, signal });

export const useCategoryGetItemsForCategory = <
  TData = CategoryGetItemsForCategoryResponse
>(
  variables: CategoryGetItemsForCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CategoryGetItemsForCategoryResponse,
      CategoryGetItemsForCategoryError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<
    CategoryGetItemsForCategoryResponse,
    CategoryGetItemsForCategoryError,
    TData
  >(
    queryKeyFn({
      path: "/category/{category}",
      operationId: "categoryGetItemsForCategory",
      variables,
    }),
    ({ signal }) =>
      fetchCategoryGetItemsForCategory(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CategoryGetItemsOfRandomCategoryQueryParams = {
  /**
   * Enter amount, leave empty if default amount should be retrieved
   *
   * @format int32
   * @default 10
   */
  limit?: number;
};

export type CategoryGetItemsOfRandomCategoryError =
  Fetcher.ErrorWrapper<undefined>;

export type CategoryGetItemsOfRandomCategoryResponse = Schemas.ProductDetail[];

export type CategoryGetItemsOfRandomCategoryVariables = {
  queryParams?: CategoryGetItemsOfRandomCategoryQueryParams;
} & ShopContext["fetcherOptions"];

export const fetchCategoryGetItemsOfRandomCategory = (
  variables: CategoryGetItemsOfRandomCategoryVariables,
  signal?: AbortSignal
) =>
  shopFetch<
    CategoryGetItemsOfRandomCategoryResponse,
    CategoryGetItemsOfRandomCategoryError,
    undefined,
    {},
    CategoryGetItemsOfRandomCategoryQueryParams,
    {}
  >({ url: "/category/random", method: "get", ...variables, signal });

export const useCategoryGetItemsOfRandomCategory = <
  TData = CategoryGetItemsOfRandomCategoryResponse
>(
  variables: CategoryGetItemsOfRandomCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      CategoryGetItemsOfRandomCategoryResponse,
      CategoryGetItemsOfRandomCategoryError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useShopContext(options);
  return reactQuery.useQuery<
    CategoryGetItemsOfRandomCategoryResponse,
    CategoryGetItemsOfRandomCategoryError,
    TData
  >(
    queryKeyFn({
      path: "/category/random",
      operationId: "categoryGetItemsOfRandomCategory",
      variables,
    }),
    ({ signal }) =>
      fetchCategoryGetItemsOfRandomCategory(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/shopping-cart";
      operationId: "shoppingCartGetShoppingCart";
      variables: ShoppingCartGetShoppingCartVariables;
    }
  | {
      path: "/shopping-cart/add/{id}/{quantity}";
      operationId: "shoppingCartAddItemToCart";
      variables: ShoppingCartAddItemToCartVariables;
    }
  | {
      path: "/shopping-cart/remove/{id}/{quantity}";
      operationId: "shoppingCartRemoveItemFromCart";
      variables: ShoppingCartRemoveItemFromCartVariables;
    }
  | {
      path: "/shopping-cart/empty";
      operationId: "shoppingCartEmptyCart";
      variables: ShoppingCartEmptyCartVariables;
    }
  | {
      path: "/product/productId";
      operationId: "productGetProduct";
      variables: ProductGetProductVariables;
    }
  | {
      path: "/product/productIds";
      operationId: "productGetProductsById";
      variables: ProductGetProductsByIdVariables;
    }
  | {
      path: "/category/all";
      operationId: "categoryGetCategories";
      variables: CategoryGetCategoriesVariables;
    }
  | {
      path: "/category/{category}";
      operationId: "categoryGetItemsForCategory";
      variables: CategoryGetItemsForCategoryVariables;
    }
  | {
      path: "/category/random";
      operationId: "categoryGetItemsOfRandomCategory";
      variables: CategoryGetItemsOfRandomCategoryVariables;
    };
